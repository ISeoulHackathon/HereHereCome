
<div id="chart"></div>
<!-- D3.js -->
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://d3js.org/queue.v1.min.js"></script>
<script src="http://d3js.org/topojson.v1.min.js"></script>
<script>

// set params
var width = 1100,
    height = 800;

var svg = d3.select("#chart").append("svg")
    .attr("width", width)
    .attr("height", height);
var projection = d3.geo.mercator()
    .center([126.9895, 37.5651])
    .scale([100000])
    .translate([width / 2, height / 2]);

var path = d3.geo.path().projection(projection);
var zoom = d3.behavior.zoom()
    // .translate(projection.translate())
    // .scale(projection.scale())
    // .scaleExtent([height, 10 * height])
    .on("zoom", zoomed);
var map = svg.append("g").attr("id", "map").call(zoom),
    points = svg.append("g")
                .attr("id", "places");



//add Map
d3.json("json/seoul_municipalities_topo_simple.json", function(error, data) {
    var features = topojson.feature(data, data.objects.seoul_municipalities_geo).features;
    // draw path of map from json data
    map.selectAll("path").data(features).enter().append("path").attr("class", function(d) {
        return "municipality c" + d.properties.code
    }).attr("d", path).call(zoom);
    // draw text of map
    map.selectAll("text").data(features).enter().append("text").attr("transform", function(d) {
        return "translate(" + path.centroid(d) + ")";
    }).attr("dy", ".35em").attr("class", "municipality-label").text(function(d) {
        return d.properties.name;
    });
});

d3.csv("places.csv", function(data) {
  points.selectAll("circle")
      .data(data)
      .enter()
      .append("a")
      .attr("xlink:href", function(d){ return "/view/" + d.zone})
      .append("circle")
      .attr("class", "place")
      .attr("cx", function(d) { return projection([d.lon, d.lat])[0]; })
      .attr("cy", function(d) { return projection([d.lon, d.lat])[1]; })
      .attr("r", 10);

  // points.selectAll("text")
  //     .data(data)
  //     .enter().append("text")
  //     .attr("x", function(d) { return projection([d.lon, d.lat])[0]; })
  //     .attr("y", function(d) { return projection([d.lon, d.lat])[1] + 8; })
  //     .text(function(d) { return d.name });

  // add circle labels
    var labels = [],
        labelLinks = [];

    data.forEach(function(d, i) {
        var p = projection([d.lon, d.lat]);
        var node = {
            label: d.name,
            x: p[0],
            y: p[1]
        };
        labels.push({
            node: node
        });
        labels.push({
            node: node
        }); // push twice
        labelLinks.push({
            source: i * 2,
            target: i * 2 + 1,
            weight: 1,
            x: 100
        });
    });

    var force = d3.layout.force()
        .nodes(labels)
        .links(labelLinks)
        .gravity(0)
        .linkDistance(0)
        .linkStrength(8)
        .charge(-100)
        .size([width, height])
        .on("tick", tick);

    function tick() {
        circleNode.call(updateNode);
        labelNode.each(function(d, i) {
            if (i % 2 == 0) {
                d.x = d.node.x;
                d.y = d.node.y;
            } else {
                var b = this.childNodes[1].getBBox();
                var diffX = d.x - d.node.x,
                    diffY = d.y - d.node.y;
                var dist = Math.sqrt(diffX * diffX + diffY * diffY);
                var shiftX = Math.min(0, b.width * (diffX - dist) / (dist * 2));
                var shiftY = 5;
                this.childNodes[1].setAttribute("transform", "translate(" + shiftX + "," + shiftY + ")");
            }
        });
        labelNode.call(updateNode);
    }

    var circleNode = points.selectAll("circle")
        .data(points)
        .enter().append("circle")
        .attr("class", "node")
        .attr("r", 6)
        .style("stroke-width", 3);

    var labelNode = points.selectAll("g")
        .data(force.nodes())
        .enter().append("g")
        .attr("class", "labelNode");

    labelNode.append("circle")
        .attr("r", 0);

    labelNode.append("text")
        .text(function(d, i) {
            return i % 2 == 0 ? "" : d.node.label
        })
        .style("fill", "#555")
    var updateNode = function() {
        this.attr("transform", function(d) {
            return "translate(" + d.x + "," + d.y + ")";
        });
    }

    force.start();
});
function zoomed() {
  // projection.translate(d3.event.translate).scale(d3.event.scale);
  // points.attr("transform", "translate (" + d3.event.translate + ")");
  // map.selectAll("path").attr("d", path);
  map.attr("transform", "translate(" + d3.event.translate + ") scale(" + d3.event.scale + ")");
  points.attr("transform", "translate(" + d3.event.translate + ") scale(" + d3.event.scale + ")");
}
$("place").mouse
</script>
